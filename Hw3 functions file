//******************************************************************************
// Team # 20 CSCI/CMPE 1370 Spring2020 Homework # 3
// Emilio Saenz
// Mariana Saenz
// The following program performs addition and subtraction of fractions and
// reduces them to the simplest form.
//******************************************************************************

#include <iostream>
#include <sstream>

using namespace std;

void ShowMenu();
void getRational (int&, int&);
void add ();
void subtract ();
void displayRational (int&, int&);
void reduce (int&, int&);
int gcf(int, int);

void ShowMenu(){
    cout << "\nProgram Start" << endl;
    cout << "A. addition" << endl;
    cout << "S. subtraction" << endl;
    cout << "Q. exit" << endl;
    cout << "What do you want?" << endl;
}

void getRational(int& num, int& den){
    bool prime = true;
    string numstr, denstr, str = "4444/8888"; //initializes num/den/str strings
    cout << "Please input a fraction (n/d): "; //asks for fraction input
    getline(cin, str); // gets string input from user
    stringstream stream1(str);
    getline(stream1, numstr, '/'); //gets numerator from string stream
    getline(stream1, denstr, '/'); //gets denominator from string stream
    num = stoi(numstr); //points to num integer
    den = stoi(denstr); //points to den integer
    while (prime == true){
        if (den == 0){
        cout << "Cannot divide by zero" << endl; 
        prime = false; break;
        }
        else{
            prime = false; continue;
        }
    }
}

void add(){
    system("clear"); //clears screen
    bool prime = true;
    int num1, num2, den1, den2, anum, aden = 0;
    while(prime == true){
        char user = '\0';
        cout << "Addition of rational numbers" << endl;
        getRational(num1, den1); //gets integer values from num1/den1
        getRational(num2, den2);
        cout << "The result of "; displayRational(num1, den1); // calls displayResult
        cout << " + "; displayRational(num2, den2); // calls displayResult
        anum = (num1 * den2) + (num2 * den1); //must include definition for anum/aden here
        aden = (den1 * den2); 
        cout << " is: "; 
        if (aden == 0){
            cout << "Cannot divide by zero" << endl; 
            prime = false; 
            break;
        }
        else{
            prime = false;
        }
        displayRational(anum, aden);
        cout << "\nDo you want to do more additions? (Y/N): "; //asks user for more additions
        cin >> user;
        cin.ignore();
        if ((user == 'N')||(user=='n')){ //if no, stops program
            break;
        }
    }
}

void subtract(){
    system("clear");
    bool prime = true;
    int num1, num2, den1, den2, snum, sden = 0;
    while(true){
        char user = '\0';
        cout << "Subtraction of rational numbers" << endl;
        getRational(num1, den1); //gets integer values from num1/den1
        getRational(num2, den2);
        cout << "The result of "; displayRational(num1, den1); // calls displayResult
        cout << " - "; displayRational(num2, den2); // calls displayResult
        snum = (num1 * den2) - (num2 * den1); //must include definition for snum/sden here
        sden = (den1 * den2); 
        cout << " is: "; 
                if (sden == 0){
            cout << "Cannot divide by zero" << endl; 
            prime = false; break;
        }
        else{
            prime = false;
        }
        displayRational(snum, sden);
        cout << "\nDo you want to do more subtractions? (Y/N): "; //asks user for more subtractions
        cin >> user;
        cin.ignore();
        if ((user == 'N')||(user=='n')){ //if no, stops program
            break;
        }
    }
}

void displayRational(int &num, int &den){
    if (den == num){
        cout << 1;
    }
    else if (den == 1){
        cout << num;
    }
    else if(num == 0){
        cout << 0;
    }
    else{
        cout << num << "/" << den;
    }
}

void reduce(int &num, int &den){
    int rem = num%den; //initialize remainder integer
    int rednum = num/gcf(num, den);
    int redden = den/gcf(num, den);
    if (redden == 1){    
        cout << rednum << endl;
    }
    else{
        cout << rednum << "/" << redden << endl;
    }
}

int gcf(int num, int den) 
{ 
    if (num == 0) 
        return den; 
    return gcf(den % num, num); 
} 
